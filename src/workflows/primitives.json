{
    "primitives": [
      {
        "name": "generation",
        "description": "Generates text based on a given prompt using a language model (LLM).",
        "parameters": [
          {
            "name": "prompt",
            "type": "string",
            "description": "The input prompt for generating text."
          }
        ],
        "returns": {
          "type": "string",
          "description": "The generated text."
        }
      },
      {
        "name": "function_calling",
        "description": "Calls a specified function with a given query and returns the result.",
        "parameters": [
          {
            "name": "query",
            "type": "string",
            "description": "The input query for the function."
          }
        ],
        "returns": {
          "type": "dict",
          "description": "The result of the function call."
        }
      },
      {
        "name": "store_in_cache",
        "description": "Stores a key-value pair in the cache.",
        "parameters": [
          {
            "name": "key",
            "type": "string",
            "description": "The key for storing the value."
          },
          {
            "name": "value",
            "type": "string",
            "description": "The value to be stored."
          }
        ]
      },
      {
        "name": "store_in_semantic_cache",
        "description": "Stores a key-value pair in the semantic cache.",
        "function": "store_in_semantic_cache",
        "parameters": [
          {
            "name": "semantic_cache",
            "type": "SemanticCache",
            "description": "A mutable reference to the semantic cache."
          },
          {
            "name": "key",
            "type": "string",
            "description": "The key for storing the value."
          },
          {
            "name": "value",
            "type": "string",
            "description": "The value to be stored."
          }
        ]
      },
      {
        "name": "push_to_vec",
        "description": "Pushes a value to a vector associated with a given key in the vec_storage.",
        "function": "push_to_vec",
        "parameters": [
          {
            "name": "vec_storage",
            "type": "HashMap<String, Vec<String>>",
            "description": "A mutable reference to the vec_storage."
          },
          {
            "name": "key",
            "type": "string",
            "description": "The key associated with the vector."
          },
          {
            "name": "value",
            "type": "string",
            "description": "The value to be pushed to the vector."
          }
        ]
      },
      {
        "name": "search_cache",
        "description": "Searches for a value in the cache based on a given key.",
        "function": "search_cache",
        "parameters": [
          {
            "name": "cache",
            "type": "HashMap<String, String>",
            "description": "A reference to the cache."
          },
          {
            "name": "key",
            "type": "string",
            "description": "The key to search for."
          }
        ],
        "returns": {
          "type": "Option<&String>",
          "description": "An optional reference to the value associated with the key."
        }
      },
      {
        "name": "search_semantic_cache",
        "description": "Searches for values in the semantic cache based on a given query.",
        "function": "search_semantic_cache",
        "parameters": [
          {
            "name": "semantic_cache",
            "type": "SemanticCache",
            "description": "A reference to the semantic cache."
          },
          {
            "name": "query",
            "type": "string",
            "description": "The query to search for."
          }
        ],
        "returns": {
          "type": "Vec<String>",
          "description": "A vector of matching results."
        }
      },
      {
        "name": "read_vec",
        "description": "Reads the last element of a vector associated with a given key in the vec_storage.",
        "function": "read_vec",
        "parameters": [
          {
            "name": "vec_storage",
            "type": "HashMap<String, Vec<String>>",
            "description": "A reference to the vec_storage."
          },
          {
            "name": "key",
            "type": "string",
            "description": "The key associated with the vector."
          }
        ],
        "returns": {
          "type": "Option<&String>",
          "description": "An optional reference to the last element of the vector."
        }
      },
      {
        "name": "pop_vec",
        "description": "Removes and returns the last element of a vector associated with a given key in the vec_storage.",
        "function": "pop_vec",
        "parameters": [
          {
            "name": "vec_storage",
            "type": "HashMap<String, Vec<String>>",
            "description": "A mutable reference to the vec_storage."
          },
          {
            "name": "key",
            "type": "string",
            "description": "The key associated with the vector."
          }
        ],
        "returns": {
          "type": "Option<String>",
          "description": "The popped value."
        }
      },
      {
        "name": "check_result",
        "description": "Checks if a given result matches an expected value.",
        "function": "check_result",
        "parameters": [
          {
            "name": "result",
            "type": "string",
            "description": "The result to be checked."
          },
          {
            "name": "expected",
            "type": "string",
            "description": "The expected value."
          }
        ],
        "returns": {
          "type": "bool",
          "description": "True if the result matches the expected value, false otherwise."
        }
      }
    ]
  }