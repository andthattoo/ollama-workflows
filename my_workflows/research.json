{
    "name": "Searching Agent",
    "description": "Try to answer a given question using data from the web with grounded data.",
    "config": {
        "max_steps": 35,
        "max_time": 600,
        "tools": ["serper", "jina", "browserless", "stock"]
    },
    "tasks": [
        {
            "id": "A",
            "name": "Web Search Query",
            "description": "Write a web search query to collect useful information for the given question",
            "prompt": "Write down a single search query to collect useful information to answer to given question. Be creative. Avoid asking previously asked questions: \n<query>{query}</query> \n\n <previous_questions>{history}</previous_questions> \n\n <search_query>",
            "inputs": [
                {
                    "name": "query",
                    "value": {
                        "type": "input",
                        "key": ""
                    },
                    "required": true
                },
                {
                    "name": "history",
                    "value": {
                        "type": "get_all",
                        "key": "history"
                    },
                    "required": false
                }
            ],
            "operator": "generation",
            "outputs": [
                {
                    "type": "push",
                    "key": "queries",
                    "value": "__result"
                },
                {
                    "type": "push",
                    "key": "history",
                    "value": "__result"
                }
            ]
        },
        {
            "id": "B",
            "name": "Web Search",
            "description": "Search the web with the given query",
            "prompt": "{query}",
            "inputs": [
                {
                    "name": "query",
                    "value": {
                        "type": "pop",
                        "key": "queries"
                    },
                    "required": true
                }
            ],
            "operator": "function_calling",
            "outputs": [
                {
                    "type": "write",
                    "key": "search_result",
                    "value": "__result"
                }
            ]
        },
        {
            "id": "C",
            "name": "Candidate Website",
            "description": "Pick the most useful link from web search results for the given query",
            "prompt": "Pick the most useful URL to scrape information for Query: {query} \n\n ###Sarch Results:{web_results} \n\n Only output the selected URL: ###Selected URL:",
            "inputs": [
                {
                    "name": "web_results",
                    "value": {
                        "type": "read",
                        "key": "search_result"
                    },
                    "required": true
                },
                {
                    "name": "query",
                    "value": {
                        "type": "input",
                        "key": ""
                    },
                    "required": true
                }
            ],
            "operator": "generation",
            "outputs": [
                {
                    "type": "write",
                    "key": "search_url",
                    "value": "__result"
                }
            ]
        },
        {
            "id": "D",
            "name": "Scrape Website",
            "description": "Scrape the selected website",
            "prompt": "scrape {search_url}",
            "inputs": [
                {
                    "name": "search_url",
                    "value": {
                        "type": "read",
                        "key": "search_url",
                        "required": true
                    },
                    "required": true
                }
            ],
            "operator": "function_calling",
            "outputs": [
                {
                    "type": "insert",
                    "key": "",
                    "value": "__result"
                }
            ]
        },
        {
            "id": "E",
            "name": "Ask questions",
            "description": "Ask questions to filesystem",
            "prompt": "{query}",
            "inputs": [
                {
                    "name": "query",
                    "value": {
                        "type": "pop",
                        "key": "content",
                        "required": true
                    },
                    "required": true
                }
            ],
            "operator": "search",
            "outputs": [
                {
                    "type": "push",
                    "key": "passages",
                    "value": "__result"
                }
            ]
        },
        {
            "id": "F",
            "name": "Answer Query",
            "description": "Answer questions from the scraped data",
            "prompt": "Answer following question based on the passages provided as context. Striclty used the context to answer the question. \n\n###Question:{query}  \n\n###Passages:{passages} \n\n###Answer:",
            "inputs": [
                {
                    "name": "query",
                    "value": {
                        "type": "pop",
                        "key": "queries",
                        "required": true
                    },
                    "required": true
                },
                {
                    "name": "passages",
                    "value": {
                        "type": "get_all",
                        "key": "passages",
                        "required": true
                    },
                    "required": true
                }
            ],
            "operator": "generation",
            "outputs": [
                {
                    "type": "write",
                    "key": "answer",
                    "value": "__result"
                }
            ]
        },
        {
            "id": "G",
            "name": "Evaluate Result",
            "description": "Evaluate if the result is satisfying",
            "prompt": "Evaluate the result if it answers the query. Write 'Yes' if valid, if not 'No'.Write nothing else but strictly 'Yes'|'No'. query:{query} result:{answer}. ###Evaluation:",
            "inputs": [
                {
                    "name": "answer",
                    "value": {
                        "type": "read",
                        "key": "answer"
                    },
                    "required": true
                },
                {
                    "name": "query",
                    "value": {
                        "type": "input",
                        "key": ""
                    },
                    "required": true
                }
            ],
            "operator": "generation",
            "outputs": [
                {
                    "type": "write",
                    "key": "final_result",
                    "value": "__result"
                }
            ]
        },
        {
            "id": "H",
            "name": "Check Result",
            "description": "Check if the result is satisfying",
            "prompt": "",
            "inputs": [
                {
                    "name": "__output",
                    "value": {
                        "type": "read",
                        "key": "final_result"
                    },
                    "required": true
                },
                {
                    "name": "__expected",
                    "value": {
                        "type": "string",
                        "key": "Yes"
                    },
                    "required": true
                }
            ],
            "operator": "check",
            "outputs": []
        },
        {
            "id": "__end",
            "name": "end",
            "description": "End of the task",
            "prompt": "End of the task",
            "inputs": [],
            "operator": "end",
            "outputs": []
        }
    ],
    "steps": [
        {
            "source": "A",
            "target": "B",
            "fallback": "end"
        },
        {
            "source": "B",
            "target": "C",
            "fallback": "A"
        },
        {
            "source": "C",
            "target": "D"
        },
        {
            "source": "D",
            "target": "E",
            "condition": {
                "input":{
                    "type":"size",
                    "key": "history"
                },
                "expression": "GreaterThan",
                "expected": "5",
                "target_if_not": "A"
            }
        },
        {
            "source": "E",
            "target": "F",
            "condition": {
                "input":{
                    "type":"size",
                    "key": "queries"
                },
                "expression": "Equal",
                "expected": "0",
                "target_if_not": "E"
            }
        },
        {
            "source": "F",
            "target": "G"
        },
        {
            "source": "G",
            "target": "end",
            "fallback": "A"
        }
    ]
}